<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Create E2E Client Program (with FTEs)" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="WEB_SERVER" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER,pebeta.poweredbyhackett.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WEB_SERVER_SCHEMA" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER_SCHEMA</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER_SCHEMA,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WEB_SERVER_PORT" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER_PORT</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER_PORT,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WEB_SERVER_PREF_LOC" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER_PREF_LOC</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER_PREF_LOC,rKIWe0mUHz4/o9UUdHICjQ==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_NAME" elementType="Argument">
            <stringProp name="Argument.name">USER_NAME</stringProp>
            <stringProp name="Argument.value">${__P(USER_NAME,mcrespo@thehackettgroup.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_PASS" elementType="Argument">
            <stringProp name="Argument.name">USER_PASS</stringProp>
            <stringProp name="Argument.value">${__P(USER_PASS,welcome4)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMPANY_ID" elementType="Argument">
            <stringProp name="Argument.name">COMPANY_ID</stringProp>
            <stringProp name="Argument.value">${__P(COMPANY_ID,2838634)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROGRAM_ID" elementType="Argument">
            <stringProp name="Argument.name">PROGRAM_ID</stringProp>
            <stringProp name="Argument.value">${__P(PROGRAM_ID,3739829)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DATA_SOURCE_ID" elementType="Argument">
            <stringProp name="Argument.name">DATA_SOURCE_ID</stringProp>
            <stringProp name="Argument.value">${__P(DATA_SOURCE_ID,477977)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NEW_PROGRAM_NAME" elementType="Argument">
            <stringProp name="Argument.name">NEW_PROGRAM_NAME</stringProp>
            <stringProp name="Argument.value">${__P(NEW_PROGRAM_NAME, Kinda Answers 2 CP )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PM_EMAIL" elementType="Argument">
            <stringProp name="Argument.name">PM_EMAIL</stringProp>
            <stringProp name="Argument.value">${__P(PM_EMAIL,mcrespo@thehackettgroup.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PERSON_ID" elementType="Argument">
            <stringProp name="Argument.name">PERSON_ID</stringProp>
            <stringProp name="Argument.value">${__P(PERSON_ID,16)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FUNCTION_IDS" elementType="Argument">
            <stringProp name="Argument.name">FUNCTION_IDS</stringProp>
            <stringProp name="Argument.value">920030,920031,920032,920033,920034,920035,920036,920037,920038,920039,920040,920041,920042,920043,920044,920045,920046</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FUNCTION_NAMES" elementType="Argument">
            <stringProp name="Argument.name">FUNCTION_NAMES</stringProp>
            <stringProp name="Argument.value">Customer to Cash,Account to Report,Plan to Results,Purchase to Pay, Source to Contract, Plan, Make to Deliver, Sales Execution, Sales Operations and Planning,Market to Contact,Strategy to Market,Contact to Satisfaction,Reward to exit,Talent Management,Time to Pay,General (E2E),Information Technology (E2E)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CPP_YEAR" elementType="Argument">
            <stringProp name="Argument.name">CPP_YEAR</stringProp>
            <stringProp name="Argument.value">2022</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PR_EMAIL" elementType="Argument">
            <stringProp name="Argument.name">PR_EMAIL</stringProp>
            <stringProp name="Argument.value">${__P(PR_EMAIL,fpalacio+pr1@kindalab.co)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROD_ALL_TAX_NODE_ID" elementType="Argument">
            <stringProp name="Argument.name">PROD_ALL_TAX_NODE_ID</stringProp>
            <stringProp name="Argument.value">2925940</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROD_TAXONOMY" elementType="Argument">
            <stringProp name="Argument.name">PROD_TAXONOMY</stringProp>
            <stringProp name="Argument.value">535123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PR_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PR_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(PR_PASSWORD,welcome11)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PR_PREF_LOC" elementType="Argument">
            <stringProp name="Argument.name">PR_PREF_LOC</stringProp>
            <stringProp name="Argument.value">${__P(PR_PREF_LOC,4MV/TWTMEgogMnOtFPKt+w==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DPM_EMAIL" elementType="Argument">
            <stringProp name="Argument.name">DPM_EMAIL</stringProp>
            <stringProp name="Argument.value">${__P(DPM_EMAIL,fpalacio@kindalab.co)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DPM_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">DPM_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(DPM_PASSWORD,welcome1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DPM_PREF_LOC" elementType="Argument">
            <stringProp name="Argument.name">DPM_PREF_LOC</stringProp>
            <stringProp name="Argument.value">${__P(DPM_PREF_LOC,ERyiKJvNCdJ0bc7nS3keBQ==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay before each step" enabled="true">
        <stringProp name="ConstantTimer.delay">${__P(general_delay, 1)}</stringProp>
      </ConstantTimer>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="locPref" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">${WEB_SERVER_PREF_LOC}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
              <stringProp name="Argument.name">locPref</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${WEB_SERVER}</stringProp>
        <stringProp name="HTTPSampler.port">${WEB_SERVER_PORT}</stringProp>
        <stringProp name="HTTPSampler.protocol">${WEB_SERVER_SCHEMA}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">/</stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.embedded_url_re">${WEB_SERVER}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies">
          <elementProp name="latestLocPref" elementType="Cookie" testname="latestLocPref">
            <stringProp name="Cookie.value">${WEB_SERVER_PREF_LOC}</stringProp>
            <stringProp name="Cookie.domain"></stringProp>
            <stringProp name="Cookie.path"></stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
        </collectionProp>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="QL Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set Functions" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">${__split(${FUNCTION_IDS},FUNCTION_ID,\,)};
${__split(${FUNCTION_NAMES},FUNCTION_NAME,\,)};</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Program Name" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters">NEW_PROGRAM_NAME2</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.text.SimpleDateFormat;
StringBuilder newProgramName = new StringBuilder();

String programName = vars.get(&quot;NEW_PROGRAM_NAME&quot;);
String suffixDate = new SimpleDateFormat(&quot;yy-MM-dd-hh&quot;).format(new Date());
newProgramName.append(programName);

if (!programName.contains(suffixDate)) {
	newProgramName.append(suffixDate);
}
vars.put(&quot;NEW_PROGRAM_NAME2&quot;, newProgramName.toString());</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login as PM" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Init session" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${WEB_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port">${WEB_SERVER_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${WEB_SERVER_SCHEMA}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pbm</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">6000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/53.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegEx Extractor - LT" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">GetLT</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;lt&quot; value=&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegEx Extractor - Execution" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">GetExecution</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;execution&quot; value=&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">GetExecution_NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="TestPlan.comments">Identity module is changed so the authentication is through &quot;execution&quot; parameter rather than &quot;LT&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authenticate" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${USER_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${USER_PASS}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="execution" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">execution</stringProp>
                  <stringProp name="Argument.value">${GetExecution}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_eventId</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locPref" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${WEB_SERVER_PREF_LOC}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">locPref</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${WEB_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port">${WEB_SERVER_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${WEB_SERVER_SCHEMA}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/pbm/login/authenticate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegEx Extractor - X-CSRF-TOKEN" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">GetXCSRFTOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">X-CSRF-TOKEN: (.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">XCSRFTOKEN_NotFound</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="exactLimit">10000</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>600.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="throughputPeriod">60</intProp>
            <longProp name="duration">300</longProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="randomSeed">0</longProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Beta - User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="WEB_SERVER" elementType="Argument">
              <stringProp name="Argument.name">WEB_SERVER</stringProp>
              <stringProp name="Argument.value">${__P(WEB_SERVER,pebeta.poweredbyhackett.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="WEB_SERVER_SCHEMA" elementType="Argument">
              <stringProp name="Argument.name">WEB_SERVER_SCHEMA</stringProp>
              <stringProp name="Argument.value">${__P(WEB_SERVER_SCHEMA,https)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="WEB_SERVER_PORT" elementType="Argument">
              <stringProp name="Argument.name">WEB_SERVER_PORT</stringProp>
              <stringProp name="Argument.value">${__P(WEB_SERVER_PORT,443)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="WEB_SERVER_PREF_LOC" elementType="Argument">
              <stringProp name="Argument.name">WEB_SERVER_PREF_LOC</stringProp>
              <stringProp name="Argument.value">${__P(WEB_SERVER_PREF_LOC,eXMCyCYDsVv3Q9juTyGYbQ==)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="USER_NAME" elementType="Argument">
              <stringProp name="Argument.name">USER_NAME</stringProp>
              <stringProp name="Argument.value">${__P(USER_NAME,mcrespo@thehackettgroup.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="USER_PASS" elementType="Argument">
              <stringProp name="Argument.name">USER_PASS</stringProp>
              <stringProp name="Argument.value">${__P(USER_PASS,welcome4)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="COMPANY_ID" elementType="Argument">
              <stringProp name="Argument.name">COMPANY_ID</stringProp>
              <stringProp name="Argument.value">${__P(COMPANY_ID,178)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROGRAM_ID" elementType="Argument">
              <stringProp name="Argument.name">PROGRAM_ID</stringProp>
              <stringProp name="Argument.value">${__P(PROGRAM_ID,3739829)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DATA_SOURCE_ID" elementType="Argument">
              <stringProp name="Argument.name">DATA_SOURCE_ID</stringProp>
              <stringProp name="Argument.value">${__P(DATA_SOURCE_ID,477977)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="NEW_PROGRAM_NAME" elementType="Argument">
              <stringProp name="Argument.name">NEW_PROGRAM_NAME</stringProp>
              <stringProp name="Argument.value">${__P(NEW_PROGRAM_NAME, JE2E ${__time(yy-MM-dd-hh:mm,)})}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PM_EMAIL" elementType="Argument">
              <stringProp name="Argument.name">PM_EMAIL</stringProp>
              <stringProp name="Argument.value">${__P(PM_EMAIL,mcrespo@thehackettgroup.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PERSON_ID" elementType="Argument">
              <stringProp name="Argument.name">PERSON_ID</stringProp>
              <stringProp name="Argument.value">${__P(PERSON_ID,16)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FUNCTION_IDS" elementType="Argument">
              <stringProp name="Argument.name">FUNCTION_IDS</stringProp>
              <stringProp name="Argument.value">920030,920031,920032,920033,920034,920035,920036,920037,920038,920039,920040,920041,920042,920043,920044,920045,920046</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FUNCTION_NAMES" elementType="Argument">
              <stringProp name="Argument.name">FUNCTION_NAMES</stringProp>
              <stringProp name="Argument.value">Customer to Cash,Account to Report,Plan to Results,Purchase to Pay, Source to Contract, Plan, Make to Deliver, Sales Execution, Sales Operations and Planning,Market to Contact,Strategy to Market,Contact to Satisfaction,Reward to exit,Talent Management,Time to Pay,General (E2E),Information Technology (E2E)</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CPP_YEAR" elementType="Argument">
              <stringProp name="Argument.name">CPP_YEAR</stringProp>
              <stringProp name="Argument.value">2020</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PR_EMAIL" elementType="Argument">
              <stringProp name="Argument.name">PR_EMAIL</stringProp>
              <stringProp name="Argument.value">${__P(PR_EMAIL,esteban.endava+01@gmail.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROD_ALL_TAX_NODE_ID" elementType="Argument">
              <stringProp name="Argument.name">PROD_ALL_TAX_NODE_ID</stringProp>
              <stringProp name="Argument.value">2925940</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROD_TAXONOMY" elementType="Argument">
              <stringProp name="Argument.name">PROD_TAXONOMY</stringProp>
              <stringProp name="Argument.value">535123</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PR_PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">PR_PASSWORD</stringProp>
              <stringProp name="Argument.value">${__P(PR_PASSWORD,welcome4)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PR_PREF_LOC" elementType="Argument">
              <stringProp name="Argument.name">PR_PREF_LOC</stringProp>
              <stringProp name="Argument.value">${__P(PR_PREF_LOC,fYP4FXWpoyXnQwCyrgItLQ==)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DPM_EMAIL" elementType="Argument">
              <stringProp name="Argument.name">DPM_EMAIL</stringProp>
              <stringProp name="Argument.value">${__P(DPM_EMAIL,esteban.endava@gmail.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DPM_PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">DPM_PASSWORD</stringProp>
              <stringProp name="Argument.value">${__P(DPM_PASSWORD,welcome4)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DPM_PREF_LOC" elementType="Argument">
              <stringProp name="Argument.name">DPM_PREF_LOC</stringProp>
              <stringProp name="Argument.value">${__P(DPM_PREF_LOC,zCuhQSSvmGIhUa+JGip8mA==)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
      </hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Dev - User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="WEB_SERVER" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER,pedev.poweredbyhackett.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WEB_SERVER_SCHEMA" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER_SCHEMA</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER_SCHEMA,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WEB_SERVER_PORT" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER_PORT</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER_PORT,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WEB_SERVER_PREF_LOC" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER_PREF_LOC</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER_PREF_LOC,ew93i5MXSplDgCh/cxUaNg==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_NAME" elementType="Argument">
            <stringProp name="Argument.name">USER_NAME</stringProp>
            <stringProp name="Argument.value">${__P(USER_NAME,mcrespo@thehackettgroup.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_PASS" elementType="Argument">
            <stringProp name="Argument.name">USER_PASS</stringProp>
            <stringProp name="Argument.value">${__P(USER_PASS,welcome1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMPANY_ID" elementType="Argument">
            <stringProp name="Argument.name">COMPANY_ID</stringProp>
            <stringProp name="Argument.value">${__P(COMPANY_ID,178)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROGRAM_ID" elementType="Argument">
            <stringProp name="Argument.name">PROGRAM_ID</stringProp>
            <stringProp name="Argument.value">${__P(PROGRAM_ID,3739829)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DATA_SOURCE_ID" elementType="Argument">
            <stringProp name="Argument.name">DATA_SOURCE_ID</stringProp>
            <stringProp name="Argument.value">${__P(DATA_SOURCE_ID,477977)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NEW_PROGRAM_NAME" elementType="Argument">
            <stringProp name="Argument.name">NEW_PROGRAM_NAME</stringProp>
            <stringProp name="Argument.value">${__P(NEW_PROGRAM_NAME, JE2E ${__time(yy-MM-dd-hh:mm,)})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PM_EMAIL" elementType="Argument">
            <stringProp name="Argument.name">PM_EMAIL</stringProp>
            <stringProp name="Argument.value">${__P(PM_EMAIL,mcrespo@thehackettgroup.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PERSON_ID" elementType="Argument">
            <stringProp name="Argument.name">PERSON_ID</stringProp>
            <stringProp name="Argument.value">${__P(PERSON_ID,16)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FUNCTION_IDS" elementType="Argument">
            <stringProp name="Argument.name">FUNCTION_IDS</stringProp>
            <stringProp name="Argument.value">920030,920031,920032,920033,920034,920035,920036,920037,920038,920039,920040,920041,920042,920043,920044,920045,920046</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FUNCTION_NAMES" elementType="Argument">
            <stringProp name="Argument.name">FUNCTION_NAMES</stringProp>
            <stringProp name="Argument.value">Customer to Cash,Account to Report,Plan to Results,Purchase to Pay, Source to Contract, Plan, Make to Deliver, Sales Execution, Sales Operations and Planning,Market to Contact,Strategy to Market,Contact to Satisfaction,Reward to exit,Talent Management,Time to Pay,General (E2E),Information Technology (E2E)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CPP_YEAR" elementType="Argument">
            <stringProp name="Argument.name">CPP_YEAR</stringProp>
            <stringProp name="Argument.value">2020</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PR_EMAIL" elementType="Argument">
            <stringProp name="Argument.name">PR_EMAIL</stringProp>
            <stringProp name="Argument.value">${__P(PR_EMAIL,rmuccilli+pr01@gmail.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROD_ALL_TAX_NODE_ID" elementType="Argument">
            <stringProp name="Argument.name">PROD_ALL_TAX_NODE_ID</stringProp>
            <stringProp name="Argument.value">2925940</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROD_TAXONOMY" elementType="Argument">
            <stringProp name="Argument.name">PROD_TAXONOMY</stringProp>
            <stringProp name="Argument.value">535123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PR_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PR_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(PR_PASSWORD,welcome1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PR_PREF_LOC" elementType="Argument">
            <stringProp name="Argument.name">PR_PREF_LOC</stringProp>
            <stringProp name="Argument.value">${__P(PR_PREF_LOC,U2qgF7YidcBBCoS4jjlTOw==)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DPM_EMAIL" elementType="Argument">
            <stringProp name="Argument.name">DPM_EMAIL</stringProp>
            <stringProp name="Argument.value">${__P(DPM_EMAIL,rmuccilli+ftem01@gmail.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DPM_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">DPM_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(DPM_PASSWORD,welcome1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DPM_PREF_LOC" elementType="Argument">
            <stringProp name="Argument.name">DPM_PREF_LOC</stringProp>
            <stringProp name="Argument.value">${__P(DPM_PREF_LOC,slYabhq7S8QM1KAJNklluQ==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Local- User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="WEB_SERVER" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WEB_SERVER_SCHEMA" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER_SCHEMA</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER_SCHEMA,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WEB_SERVER_PORT" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER_PORT</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER_PORT,8080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WEB_SERVER_PREF_LOC" elementType="Argument">
            <stringProp name="Argument.name">WEB_SERVER_PREF_LOC</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SERVER_PREF_LOC,ObpiyFz+nR+k+7avyztfKA==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_NAME" elementType="Argument">
            <stringProp name="Argument.name">USER_NAME</stringProp>
            <stringProp name="Argument.value">${__P(USER_NAME,mcrespo@thehackettgroup.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_PASS" elementType="Argument">
            <stringProp name="Argument.name">USER_PASS</stringProp>
            <stringProp name="Argument.value">${__P(USER_PASS,welcome1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMPANY_ID" elementType="Argument">
            <stringProp name="Argument.name">COMPANY_ID</stringProp>
            <stringProp name="Argument.value">${__P(COMPANY_ID,178)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROGRAM_ID" elementType="Argument">
            <stringProp name="Argument.name">PROGRAM_ID</stringProp>
            <stringProp name="Argument.value">${__P(PROGRAM_ID,3739829)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DATA_SOURCE_ID" elementType="Argument">
            <stringProp name="Argument.name">DATA_SOURCE_ID</stringProp>
            <stringProp name="Argument.value">${__P(DATA_SOURCE_ID,477977)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NEW_PROGRAM_NAME" elementType="Argument">
            <stringProp name="Argument.name">NEW_PROGRAM_NAME</stringProp>
            <stringProp name="Argument.value">${__P(NEW_PROGRAM_NAME, JE2E ${__time(yy-MM-dd-hh:mm,)})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PM_EMAIL" elementType="Argument">
            <stringProp name="Argument.name">PM_EMAIL</stringProp>
            <stringProp name="Argument.value">${__P(PM_EMAIL,mcrespo@thehackettgroup.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PERSON_ID" elementType="Argument">
            <stringProp name="Argument.name">PERSON_ID</stringProp>
            <stringProp name="Argument.value">${__P(PERSON_ID,16)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FUNCTION_IDS" elementType="Argument">
            <stringProp name="Argument.name">FUNCTION_IDS</stringProp>
            <stringProp name="Argument.value">920030,920031,920032,920033,920034,920035,920036,920037,920038,920039,920040,920041,920042,920043,920044,920045,920046</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FUNCTION_NAMES" elementType="Argument">
            <stringProp name="Argument.name">FUNCTION_NAMES</stringProp>
            <stringProp name="Argument.value">Customer to Cash,Account to Report,Plan to Results,Purchase to Pay, Source to Contract, Plan, Make to Deliver, Sales Execution, Sales Operations and Planning,Market to Contact,Strategy to Market,Contact to Satisfaction,Reward to exit,Talent Management,Time to Pay,General (E2E),Information Technology (E2E)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CPP_YEAR" elementType="Argument">
            <stringProp name="Argument.name">CPP_YEAR</stringProp>
            <stringProp name="Argument.value">2020</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PR_EMAIL" elementType="Argument">
            <stringProp name="Argument.name">PR_EMAIL</stringProp>
            <stringProp name="Argument.value">${__P(PR_EMAIL,rmuccilli+ftem01@gmail.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROD_ALL_TAX_NODE_ID" elementType="Argument">
            <stringProp name="Argument.name">PROD_ALL_TAX_NODE_ID</stringProp>
            <stringProp name="Argument.value">2925940</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROD_TAXONOMY" elementType="Argument">
            <stringProp name="Argument.name">PROD_TAXONOMY</stringProp>
            <stringProp name="Argument.value">535123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PR_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PR_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(PR_PASSWORD,welcome1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PR_PREF_LOC" elementType="Argument">
            <stringProp name="Argument.name">PR_PREF_LOC</stringProp>
            <stringProp name="Argument.value">${__P(PR_PREF_LOC,dJz5+V1FNyWYdcjgR6lkCg==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DPM_EMAIL" elementType="Argument">
            <stringProp name="Argument.name">DPM_EMAIL</stringProp>
            <stringProp name="Argument.value">${__P(DPM_EMAIL,rmuccilli+ftem03@gmail.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DPM_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">DPM_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(DPM_PASSWORD,welcome1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DPM_PREF_LOC" elementType="Argument">
            <stringProp name="Argument.name">DPM_PREF_LOC</stringProp>
            <stringProp name="Argument.value">${__P(DPM_PREF_LOC,fmnfURJs253uE/W/lZ5fKQ==)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="NEW_CPP, NEW_CPP_ID,RP_ID - User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="NEW_CP_ID" elementType="Argument">
            <stringProp name="Argument.name">NEW_CP_ID</stringProp>
            <stringProp name="Argument.value">4170597</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NEW_CPP_ID" elementType="Argument">
            <stringProp name="Argument.name">NEW_CPP_ID</stringProp>
            <stringProp name="Argument.value">4170599</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RP_ID" elementType="Argument">
            <stringProp name="Argument.name">RP_ID</stringProp>
            <stringProp name="Argument.value">4170660</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
